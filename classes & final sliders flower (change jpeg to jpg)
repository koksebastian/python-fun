steps = 4

add_library("controlP5")

def setup():
    
    cp5 = ControlP5(this)
    global slider1
    global slider2
    global slider3
    global slider4
    
    size(400,400)
    global img 
    img = loadImage("flower.jpg")
    
    slider1 = cp5.addSlider('slider 1')
    slider1.setPosition(10,10)
    slider1.setSize(200,20)
    slider1.setRange(5,25)
    slider1.setValue(10)
    
    
    slider2 = cp5.addSlider('slider 2')
    slider2.setPosition(10,30)
    slider2.setSize(200,20)
    slider2.setRange(0,500)
    slider2.setValue(200)
    
        
    slider3 = cp5.addSlider('slider 3')
    slider3.setPosition(10,50)
    slider3.setSize(200,20)
    slider3.setRange(0,3)
    slider3.setValue(5)
    
    
    slider4 = cp5.addSlider('slider 4')
    slider4.setPosition(10,70)
    slider4.setSize(200,20)
    slider4.setRange(1,3)
    slider4.setValue(1)
    

def draw():
    cross1 = crosscross(200,200)
    cross1.display()
    
    background(0)
    img.loadPixels()
    
    steps = int(slider1.value)

    
    for x in range(0, 400, steps):
        for y in range(0, 400, steps):
            loc = x + y * img.width #positie
            c = img.pixels[loc]
            b = brightness(c) / slider2.value * steps
            h = hue(c)
            colorMode(HSB)
            fill(b,255,255)
            
            
            stroke(h)
            strokeWeight(1)
            size_cross = slider3.value
            cross1 = crosscross(x,y)
            cross1.display()
            cross1.displaySquare()

            if int(random(0,20)) == 2:
                cross1.displayDot()

                
            strokeWeight(1)
            
            
def mousePressed():
    saveFrame("final_result_####.jpg")
    
class crosscross(object):
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.size_cross = 5
        
    def display(self):
        strokeWeight(1)
        line(self.xpos, self.ypos, self.xpos + self.size_cross, self.ypos+ self.size_cross) #links boven naar onder rechts
        line(self.xpos, self.ypos + self.size_cross, self.xpos + self.size_cross, self.ypos) 
        
    def displayDot(self):
        x_mid = self.xpos + (self.size_cross/2)
        y_mid = self.ypos + (self.size_cross/2)
        
        ellipse(x_mid, y_mid, 5, 5)
        
    def displaySquare(self):
        rect(self.xpos, self.ypos, self.size_cross, self.size_cross)
        
    def getValueX(self):
        return int(self.xpos)
